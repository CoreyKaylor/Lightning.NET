<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#
	var cursorMethods = new []
	{
        "MoveToFirst",
        "MoveToFirstDuplicate",
        "MoveToLast",
        "MoveToLastDuplicate",
        "GetCurrent",
        "MoveNext",
        "MoveNextDuplicate",
        "MoveNextNoDuplicate",
        "MovePrev",
        "MovePrevDuplicate",
        "MovePrevNoDuplicate"
	};
#>
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using LightningDB.Native;

namespace LightningDB
{
    public static class LightningCursorMoveExtensions
    {
        private static CursorGetByOperation CursorMoveBy(LightningCursor cur, Func<KeyValuePair<byte[], byte[]>?> mover)
        {
            return new CursorGetByOperation(cur, mover.Invoke());
        }

        private static bool CursorMove<TKey, TValue>(LightningCursor cur, Func<KeyValuePair<byte[], byte[]>?> mover, out KeyValuePair<TKey, TValue> pair)
        {
            var op = CursorMoveBy(cur, mover);

            if (!op.PairExists)
            {
                pair = default(KeyValuePair<TKey, TValue>);
                return false;
            }
            else
            {
                pair = op.Pair<TKey, TValue>();
                return true;
            }
        }
        <#
            foreach(var name in cursorMethods)
            {
        #>

        public static CursorGetByOperation <#= name #>By(this LightningCursor cur)
        {
            return CursorMoveBy(cur, cur.<#= name #>);
        }

        public static bool <#= name #><TKey, TValue>(this LightningCursor cur, out KeyValuePair<TKey, TValue> pair)
        {
            return CursorMove<TKey, TValue>(cur, cur.<#= name #>, out pair);
        }
        <#
            }
        #>
    }
}
